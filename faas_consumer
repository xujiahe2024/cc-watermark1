import base64
import functions_framework
from google.cloud import pubsub_v1
import json
import logging
from urllib.parse import unquote
from moviepy.editor import VideoFileClip, ImageClip, CompositeVideoClip, concatenate_videoclips
import os
from google.cloud import firestore
from google.cloud import storage
import logging



project_id = "watermarking-424614"
topic_id = "image-watermark"


Storage = storage.Client()
database = firestore.Client()

output_dir = os.path.abspath('./output')

    

def process_chunk(job_id, video_url, watermark_path, start, end, current_chunk, total_chunks):
        global Storage
        global database
        logging.info(f"Processing chunk {current_chunk} of {total_chunks} for job {job_id}")
        database = firestore.Client()
        job_ref = database.collection('job').document(job_id)
        
        video_path = f'{output_dir}/{job_id}_video_{current_chunk}.webm'
        
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        right_video_url = f'videos/{job_id}_{current_chunk}.webm'
        
        if not os.path.exists(video_path):
            blob = Storage.bucket('ccmarkbucket').blob(right_video_url)
            blob.download_to_filename(video_path)
            
            
        watermark_path = os.path.join(output_dir, f'{job_id}_watermark.png')
        if not os.path.exists(watermark_path):
            blob = Storage.bucket('ccmarkbucket').blob(f'watermarks/{job_id}.png')
            blob.download_to_filename(watermark_path)
            
        logging.info(f"Downloaded video for job {job_id}")
        
        video = VideoFileClip(video_path)

        #video.duration = 10
        #video = VideoFileClip(video_path).subclip(start, end)
        watermark = ImageClip(watermark_path).set_duration(video.duration)
        watermark = watermark.resize(height=50).margin(right=8, bottom=8, opacity=0).set_position(("right", "bottom"))

        processed = CompositeVideoClip([video, watermark])
        chunk_path = f'{output_dir}/{job_id}_final_chunk{current_chunk}.webm'
        processed.write_videofile(chunk_path)
        
        logging.info(f"Processed chunk {current_chunk} of {total_chunks} for job {job_id}")

        bucket = Storage.bucket('ccmarkbucket')
        blob = bucket.blob(f'{output_dir}/{job_id}_final_chunk{current_chunk}.webm')
        blob.upload_from_filename(chunk_path)

        logging.info(f"Uploaded chunk {current_chunk} of {total_chunks} for job {job_id}")
        job_data = job_ref.get().to_dict()
        logging.info(f"Job data1: {job_data}")
        
        job_ref.update({'completed_chunks': firestore.Increment(1)})

        job_data = job_ref.get().to_dict()
        logging.info(f"Job data2: {job_data}")
        if job_data['completed_chunks'] >= job_data['total_chunks']:
            logging.info(f"All chunks processed for job {job_id}")
        merge_chunks(job_id)
        job_ref.update({'status': 'completed', 'progress': 100})



def merge_chunks(job_id):
    database = firestore.Client()
    job_ref = database.collection('job').document(job_id)
    job_data = job_ref.get().to_dict()
    logging.info(f"Job data3: {job_data}")
    chunks_path = [f'{output_dir}/{job_id}_final_chunk{current_chunk}.webm' for current_chunk in range(job_data['total_chunks'])]
    logging.info(f"chunks_path: {chunks_path}")
    clips = [VideoFileClip(chunk) for chunk in chunks_path]
    final_clip = concatenate_videoclips(clips)
    final_clip.write_videofile(f'{output_dir}/final_{job_id}.mp4')
    final_result_path = f'{output_dir}/final_{job_id}.mp4'

    bucket = Storage.bucket('ccmarkbucket')
    final_blob = bucket.blob(f'{output_dir}/{job_id}_final.mp4')
    final_blob.upload_from_filename(final_result_path)
    logging.info(f"Uploaded final result for job {job_id}")





# Triggered from a message on a Cloud Pub/Sub topic.
@functions_framework.cloud_event
def hello_pubsub(message):
    # Print out the data from Pub/Sub, to prove that it worked
    print(base64.b64decode(message.data["message"]["data"]))
    try:
                data = json.loads(message.data.decode('utf-8'))
                logging.info(f"Received message : {data}")
                
                # Decode the URL
                video_url = unquote(data['video_url'])

                process_chunk(data['job_id'], video_url, data['watermark_path'], data['start'], data['end'], data['chunk_num'], data['total_chunks'])
                message.ack()
    except Exception as e:
                logging.info(f"An error occurred while processing message: {e}")
                message.ack()









   
  
